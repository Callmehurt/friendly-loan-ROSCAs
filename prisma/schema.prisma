

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//user roles enum
enum UserRole {
  admin 
  student
}

// Loan status
enum LoanStatus {
  pending
  rejected
  active
  completed
}

// Loan gurantor status
enum LoanGuarantorStatus {
  requested
  approved
  rejected
}

//models
model User{
  id Int @id @default(autoincrement())
  uniqueIdentity String @unique
  fullname String
  address String 
  email String @unique
  phone String @unique
  password String
  role UserRole @default(student)
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdGroup SavingGroup[]
  groups   GroupMembers[] @relation("GroupMember")
  addedMembers GroupMembers[] @relation("UserAddedMembers")
  loans Loan[]
  contributions Contribution[]
  guarantorRequests LoanGuarantors[] @relation("guarantor")

  @@map("users") 
}

model SavingGroup{
  id String @id @unique
  name String
  description String @db.LongText
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users GroupMembers[]
  loans  Loan[]
  contributions Contribution[]
  @@map("saving_groups")
}

model GroupMembers{
  userId  Int
  groupId String
  addedBy Int
  user    User  @relation("GroupMember", fields: [userId], references: [id])
  group   SavingGroup @relation(fields: [groupId], references: [id])
  addedByUser  User  @relation("UserAddedMembers", fields: [addedBy], references: [id])

  @@id([userId, groupId])
  @@map("group_members")
}

model Contribution {
  id              Int        @id @default(autoincrement())
  userId          Int
  groupId         String
  paymentId       String      
  amount          Decimal     @db.Decimal(10, 2)
  contributionDate DateTime   @default(now())
  createdAt       DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id])
  group           SavingGroup @relation(fields: [groupId], references: [id])

  @@map("contributions")
}

model Loan {
  id             Int            @id @default(autoincrement())
  reference      String         @unique @default(uuid())
  userId         Int
  groupId        String
  principalAmount Decimal        @db.Decimal(10, 2)
  interestRate   Decimal         @db.Decimal(5, 2)
  loanStartDate  DateTime?
  loanEndDate    DateTime?
  status         LoanStatus     @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  group          SavingGroup    @relation(fields: [groupId], references: [id])
  payments       LoanPayment[]
  guarantors     LoanGuarantors[]

  @@map("loans")
}

model LoanGuarantors {
  id             Int @id() @default(autoincrement())
  loanId         Int
  guarantorId    Int
  status         LoanGuarantorStatus @default(requested)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  guarantor      User @relation("guarantor",fields: [guarantorId], references: [id])
  loan           Loan @relation(fields: [loanId], references: [id])  

  @@unique([loanId, guarantorId])
  @@map("loan_guarantors")
}

model LoanPayment {
  id              Int        @id @default(autoincrement())
  loanId          Int
  paymentAmount   Decimal     @db.Decimal(10, 2)
  paymentDate     DateTime
  interestAmount  Decimal     @db.Decimal(10, 2)
  principalAmount Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  loan            Loan        @relation(fields: [loanId], references: [id])

  @@map("loan_payments")
}



